In bin_linux directory
************************************************************************
export PATH=${PWD}:$PATH
************************************************************************

In attempt3 directory
************************************************************************
cryptogen generate --config=./crypto-config.yaml --output="organizations"
************************************************************************

Create the genesis block
******************************************************************************************************************************************************
configtxgen -profile TwoOrgsApplicationGenesis -outputBlock ./channel-artifacts/pichannel.block -channelID pichannel
******************************************************************************************************************************************************
 
AFTER THE TWO ABOVE COMMANDS, COMMIT& PUSH TO THE REPO AND THEN PULL THE REPO ON THE PI TO SHARE THE CERTS

START THE DOCKER CONTAINERS
******************************************************************************
docker stack deploy --compose-file pi-network.yaml PiStack

NOW ADD in PATH TO ADMIN ORDERER MSP TLS ETC
************************************************************************************************************************************

export ORDERER_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
export ORDERER_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

NOW CREATE A CHANNEL USING OSNADMIN WITH THE CHANNELBLOCK CREATED
*************************************************************************************************************************************
osnadmin channel join --channel-id pichannel --config-block ./channel-artifacts/pichannel.block -o 192.168.86.156:7053 --ca-file "$ORDERER_CA" --client-cert "$ORDERER_ADMIN_TLS_SIGN_CERT" --client-key "$ORDERER_ADMIN_TLS_PRIVATE_KEY"


NOW SET PEER ADDRESS, MSP, TLS
*************************************************************************************************************************************
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=192.168.86.156:7051
export FABRIC_CFG_PATH=${PWD}/corelaptop/

export CORE_PEER_ADDRESS=localhost:7051

$$$$$ NEEDS CORE.YAML HERE FOR SOME REASON, RESEARCHING WHY $$$$$
NOW JOIN PEER ON LAPTOP TO CHANNEL
*************************************************************************************************************************************
peer channel join -b ./channel-artifacts/pichannel.block 

THIS WILL CHECK IF CONNECTION WORKS (REPLACE PISTACK_..... WITH NAME OF PEER CONTAINER)
*************************************************************************************************************************************
docker exec PiStack_peer0.1.k26y6rvs1oh5rn2z29hsdg39n peer channel getinfo -c pichannel



DEPLOY CHAINCODE
*************************************************************************************************************************************


export CHANNEL_NAME=pichannel
export CC_NAME=basic
export CC_SRC_PATH=./asset-transfer-basic/chaincode-go
export CC_SRC_LANGUAGE=go
export CC_VERSION="1.0"
export CC_SEQUENCE=1
export CC_INIT_FCN="NA"
export CC_END_POLICY="NA"
export CC_COLL_CONFIG="NA"
export CLI_DELAY=3
export MAX_RETRY=5
export VERBOSE=false


deployCC.sh $CHANNEL_NAME $CC_NAME $CC_SRC_PATH $CC_SRC_LANGUAGE $CC_VERSION $CC_SEQUENCE $CC_INIT_FCN $CC_END_POLICY $CC_COLL_CONFIG $CLI_DELAY $MAX_RETRY $VERBOSE