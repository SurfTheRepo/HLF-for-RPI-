In bin_linux directory
************************************************************************
export PATH=${PWD}:$PATH
************************************************************************

In attempt3 directory
************************************************************************
cryptogen generate --config=./crypto-config.yaml --output="organizations"
************************************************************************

Create the genesis block
******************************************************************************************************************************************************
configtxgen -profile TwoOrgsApplicationGenesis -outputBlock ./channel-artifacts/pichannel.block -channelID pichannel
******************************************************************************************************************************************************
 
AFTER THE TWO ABOVE COMMANDS, COMMIT& PUSH TO THE REPO AND THEN PULL THE REPO ON THE PI TO SHARE THE CERTS


NOW ADD in PATH TO ADMIN ORDERER MSP TLS ETC
******************************************************************************************************************************************************

export ORDERER_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
export ORDERER_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

NOW CREATE A CHANNEL USING OSNADMIN WITH THE CHANNELBLOCK CREATED
******************************************************************************************************************************************************
osnadmin channel join --channel-id pichannel --config-block ./channel-artifacts/pichannel.block -o 192.168.86.156:7053 --ca-file "$ORDERER_CA" --client-cert "$ORDERER_ADMIN_TLS_SIGN_CERT" --client-key "$ORDERER_ADMIN_TLS_PRIVATE_KEY"


NOW SET PEER ADDRESS, MSP, TLS
******************************************************************************************************************************************************
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=localhost:7051
export FABRIC_CFG_PATH=${PWD}/corelaptop/


$$$$$ NEEDS CORE.YAML HERE FOR SOME REASON, RESEARCHING WHY $$$$$
NOW JOIN PEER ON LAPTOP TO CHANNEL
******************************************************************************************************************************************************
peer channel join -b ./channel-artifacts/pichannel.block 

THIS WILL CHECK IF CONNECTION WORKS (REPLACE PISTACK_..... WITH NAME OF PEER CONTAINER)
******************************************************************************************************************************************************
docker exec PiStack_peer0.1.k26y6rvs1oh5rn2z29hsdg39n peer channel getinfo -c pichannel


NOW TO JOIN PEER SET ENVIRO VARIABLES
******************************************************************************************************************************************************
export FABRIC_CFG_PATH=${PWD}/corepi/
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=192.168.86.74:7051

NOW JOIN PEER ON PI TO CHANNEL

******************************************************************************************************************************************************

--cafile

peer channel join -b ./channel-artifacts/pichannel.block 


peer channel fetch  genesis.block -c pichannel -o 192.168.86.156:7050 --tls --cafile ${PWD}/orderer/tls.pem

peer channel fetch newest mychannel.block -c mychannel --orderer 192.168.86.156:7050 --cafile "$ORDERER_CA" --certfile "$ORDERER_ADMIN_TLS_SIGN_CERT" --keyfile "$ORDERER_ADMIN_TLS_PRIVATE_KEY"


--cafile "$ORDERER_CA" --clientfile "$ORDERER_ADMIN_TLS_SIGN_CERT" --clientauth "$ORDERER_ADMIN_TLS_PRIVATE_KEY"


Global Flags:
      --cafile string                       Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint
      --certfile string                     Path to file containing PEM-encoded X509 public key to use for mutual TLS communication with the orderer endpoint
      --clientauth                          Use mutual TLS when communicating with the orderer endpoint
      --connTimeout duration                Timeout for client to connect (default 3s)
      --keyfile string                      Path to file containing PEM-encoded private key to use for mutual TLS communication with the orderer endpoint
  -o, --orderer string                      Ordering service endpoint
      --ordererTLSHostnameOverride string   The hostname override to use when validating the TLS connection to the orderer
      --tls                                 Use TLS when communicating with the orderer endpoint
      --tlsHandshakeTimeShift duration      The amount of time to shift backwards for certificate expiration checks during TLS handshakes with the orderer endpoint